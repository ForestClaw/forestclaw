# -*- Makefile -*-
libcudaclaw_generated_headers =

libcudaclaw_installed_headers = \
	src/solvers/fc2d_cudaclaw/fc2d_cudaclaw.h \
	src/solvers/fc2d_cudaclaw/fc2d_cudaclaw_options.h \
	src/solvers/fc2d_cudaclaw/cudaclaw_user_fort.h \
	src/solvers/fc2d_cudaclaw/fc2d_cudaclaw_cuda.h


libcudaclaw_compiled_sources = \ src/solvers/fc2d_cudaclaw/fc2d_cudaclaw.cpp \
	src/solvers/fc2d_cudaclaw/fc2d_cudaclaw_options.c \
	src/solvers/fc2d_cudaclaw/fortran_source/cudaclaw_inlinelimiter.f \
	src/solvers/fc2d_cudaclaw/fortran_source/cudaclaw_set_capacity.f \
	src/solvers/fc2d_cudaclaw/fortran_source/cudaclaw_block.f \
	src/solvers/fc2d_cudaclaw/fortran_source/cudaclaw_bc2_default.f \
	src/solvers/fc2d_cudaclaw/fortran_source/cudaclaw_flux2.f \
	src/solvers/fc2d_cudaclaw/fortran_source/cudaclaw_flux2fw.f \
	src/solvers/fc2d_cudaclaw/fortran_source/cudaclaw_step2.f \
	src/solvers/fc2d_cudaclaw/fortran_source/cudaclaw_step2_wrap.f \
	src/solvers/fc2d_cudaclaw/cuda_source/cudaclaw_step2.cu \
	src/solvers/fc2d_cudaclaw/cuda_source/cudaclaw_initialize.cu \
	src/solvers/fc2d_cudaclaw/cuda_source/cudaclaw_limiters.cu \
	src/solvers/fc2d_cudaclaw/cuda_source/cudaclaw_allocate.cu \
	src/solvers/fc2d_cudaclaw/cuda_source/cudaclaw_flux2.cu \
	src/solvers/fc2d_cudaclaw/fc2d_cuda_profiler.cu \
	src/solvers/fc2d_cudaclaw/cuda_source/cudaclaw_store_patches.cu


## Name of library to build
lib_LTLIBRARIES += src/solvers/fc2d_cudaclaw/libcudaclaw.la

## Named variables that can be referenced from other libraries/apps
FCLAW_CUDACLAW_CPPFLAGS = -I@top_srcdir@/src/solvers/fc2d_cudaclaw 
FCLAW_CUDACLAW_LDADD    = @top_builddir@/src/solvers/fc2d_cudaclaw/libcudaclaw.la

## Sources needed to build this library
src_solvers_fc2d_cudaclaw_libcudaclaw_la_SOURCES = \
          $(libcudaclaw_internal_headers) \
          $(libcudaclaw_compiled_sources)

## Headers needed to build this library.  Only AM_CPPFLAGS required; others are 
## included in AM_CPPFLAGS, but are included here for clarity (although makes 
## for lengthy compile lines)
src_solvers_fc2d_cudaclaw_libcudaclaw_la_CPPFLAGS = \
          $(AM_CPPFLAGS) \
          $(FCLAW_CPPFLAGS) \
          $(FCLAW_CUDACLAW_CPPFLAGS) \
          $(FCLAW_CLAWPATCH_CPPFLAGS)

## Add headers from this library to general header pool, to be used by other apps
AM_CPPFLAGS  += $(FCLAW_CUDACLAW_CPPFLAGS)

LDADD        += $(FCLAW_CUDACLAW_LDADD)

include_HEADERS += $(libcudaclaw_installed_headers)

# ------------------------------------------
# Added to build CUDA code 
# ------------------------------------------

# Include a bunch of directories generated by autoconf/automake
CUDACLAW_INCLUDE_DIRS = $(DEFS) $(DEFAULT_INCLUDES) \
	$(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) \
	$(MPI_INCLUDES)

if USE_LOCAL_CUB
CUDACLAW_INCLUDE_DIRS += -I@top_srcdir@/cub/
endif

.cu.o: 
	$(NVCC) $(CUDA_CFLAGS) -dc $(CUDACLAW_INCLUDE_DIRS) -c -o $@ $<

# Setting --tag=NVCC (or --tag=nvcc) generates a non-fatal 
# warning.  We can avoid the warning by just setting --tag=CC;
# In any case, this tag is ignored (it seems)
.cu.lo:
	$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	    $(LIBTOOLFLAGS) --mode=compile $(NVCC) \
	    $(CUDA_CFLAGS) $(CUDACLAW_INCLUDE_DIRS) -dc -c -o $@ $<



