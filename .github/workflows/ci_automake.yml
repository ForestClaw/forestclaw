name: ForestClaw Build
on:
  push:
  pull_request:
  release:
    types: [published]
env:
  CFLAGS: -lgfortran
  CXXFLAGS: -lgfortran --std=c++17
  FCFLAGS: -lgfortran -cpp
  FFLAGS: -lgfortran -cpp
jobs:


################
# Serial builds
################

  serial_minimal_build:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libblas-dev liblapack-dev
    - name: Init and Update Submodules
      run: |
        git submodule init
        git submodule update
    - name: Run bootstrap Script
      run: ./bootstrap
    - name: Configure
      run: ./configure
    - name: Build
      run: make
    - name: Tests
      run: make check -j2
    - name: Print Test log
      if: ${{ failure() }}
      run: cat test-suite.log
    - name: Install
      run: sudo make install


  serial_build_with_clawpack_enabled:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libblas-dev liblapack-dev
    - name: Init and Update Submodules
      run: |
        git submodule init
        git submodule update
    - name: Run bootstrap Script
      run: ./bootstrap
    - name: Configure
      run: ./configure --enable-clawpack
    - name: Build
      run: make
    - name: Tests
      run: make check -j2
    - name: Print Test log
      if: ${{ failure() }}
      run: cat test-suite.log
    - name: Install
      run: sudo make install

  serial_build_with_geoclaw_enabled:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libblas-dev liblapack-dev
    - name: Init and Update Submodules
      run: |
        git submodule init
        git submodule update
    - name: Run bootstrap Script
      run: ./bootstrap
    - name: Configure
      run: ./configure --enable-geoclaw
    - name: Build
      run: make
    - name: Tests
      run: make check -j2
    - name: Print Test log
      if: ${{ failure() }}
      run: cat test-suite.log
    - name: Install
      run: sudo make install


  serial_build_with_cudaclaw_enabled:
    runs-on: ubuntu-20.04
    env:
      CUDA_PATH: /usr
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libblas-dev liblapack-dev nvidia-cuda-toolkit
    - name: Init and Update Submodules
      run: |
        git submodule init
        git submodule update
    - name: Run bootstrap Script
      run: ./bootstrap
    - name: Configure
      run: ./configure CUDA_CFLAGS="-arch=sm_61" LIBS="-lcuda -lcudart -lnvToolsExt" --enable-cudaclaw --disable-shared
    - name: Build
      run: make
    - name: Install
      run: sudo make install


#############
# MPI builds
#############

  mpi_minimal_build:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libopenmpi-dev openmpi-bin libblas-dev liblapack-dev
    - name: Init and Update Submodules
      run: |
        git submodule init
        git submodule update
    - name: Run bootstrap Script
      run: ./bootstrap
    - name: Configure
      run: ./configure --enable-mpi
    - name: Build
      run: make
    - name: Tests
      run: make check
    - name: Print Test log
      if: ${{ failure() }}
      run: cat test-suite.log
    - name: Install
      run: sudo make install


  mpi_build_with_clawpack_enabled:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libopenmpi-dev openmpi-bin libblas-dev liblapack-dev
    - name: Init and Update Submodules
      run: |
        git submodule init
        git submodule update
    - name: Run bootstrap Script
      run: ./bootstrap
    - name: Configure
      run: ./configure --enable-clawpack --enable-mpi
    - name: Build
      run: make
    - name: Tests
      run: make check
    - name: Print Test log
      if: ${{ failure() }}
      run: cat test-suite.log
    - name: Install
      run: sudo make install


  mpi_build_with_geoclaw_enabled:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libopenmpi-dev openmpi-bin libblas-dev liblapack-dev
    - name: Init and Update Submodules
      run: |
        git submodule init
        git submodule update
    - name: Run bootstrap Script
      run: ./bootstrap
    - name: Configure
      run: ./configure --enable-geoclaw --enable-mpi
    - name: Build
      run: make
    - name: Tests
      run: make check
    - name: Print Test log
      if: ${{ failure() }}
      run: cat test-suite.log
    - name: Install
      run: sudo make install


  mpi_build_with_cudaclaw_enabled:
    runs-on: ubuntu-20.04
    env:
      CUDA_PATH: /usr
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libopenmpi-dev openmpi-bin libblas-dev liblapack-dev nvidia-cuda-toolkit
    - name: Init and Update Submodules
      run: |
        git submodule init
        git submodule update
    - name: Run bootstrap Script
      run: ./bootstrap
    - name: Configure
      run: ./configure CUDA_CFLAGS="-arch=sm_61 -I/usr/lib/x86_64-linux-gnu/openmpi/include" LIBS="-lcuda -lcudart -lnvToolsExt" --enable-cudaclaw --enable-mpi --disable-shared
    - name: Build
      run: make
    - name: Install
      run: sudo make install

  mpi_build_with_thunderegg_enabled:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions/checkout@v2
      with:
        repository: ThunderEgg/ThunderEgg
        ref: develop
        path: ThunderEggSrc
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install cmake libfftw3-dev libopenmpi-dev openmpi-bin libblas-dev liblapack-dev 
    - name: Install ThunderEgg
      run: |
        cd ThunderEggSrc
        cmake -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/ThunderEgg/ -DBUILD_TESTING=OFF .
        make install
    - name: Init and Update Submodules
      run: |
        git submodule init
        git submodule update
    - name: Run bootstrap Script
      run: ./bootstrap
    - name: Configure
      run: ./configure --enable-mpi --enable-thunderegg --with-thunderegg=$GITHUB_WORKSPACE/ThunderEgg
    - name: Build
      run: make
    - name: Tests
      run: make check
    - name: Print Test log
      if: ${{ failure() }}
      run: cat test-suite.log
    - name: Install
      run: sudo make install
