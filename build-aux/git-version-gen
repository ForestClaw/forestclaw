#!/bin/sh

# This script emulates git describe for repositories with a .tarball-version or .repository-version file.
# If the .tarball-version file exists, it reads the version from that file (removing the leading character) and outputs it directly.
# If the .tarball-version file does not exist, it generates a build number based on the version number and commit hash.
# If the current commit is tagged with the version number, the build number will be the version number.
# Otherwise, the build number will be the version number appended with the short commit hash.
# If the repository is dirty, it appends -dirty to the output version string.
#
# This script is intended for use with POSIX-compatible shells and shallow copies of repositories.
#
# Usage: ./get_build_number.sh
# Output: <version>-<short_commit_hash> or <version> if the current commit is tagged or .tarball-version exists, with -dirty appended if the repository is dirty

if [ -e .tarball-version ]; then
  # If .tarball-version exists, read the version from it and remove the leading character
  version=$(cat .tarball-version)
else
  # If .tarball-version does not exist, read the latest version number from the .repository-version file and remove the leading character
  version=$(cat .repository-version)

  # Check if the current commit is tagged with this version number
  tagged_commit=$(git rev-list --abbrev-commit -n 1 "refs/tags/$version" 2>/dev/null)

  # Get the current commit hash (short version)
  current_commit=$(git rev-parse --short HEAD)

  if [ "$tagged_commit" = "$current_commit" ]; then
    # If the current commit is tagged, use the version number as the build number
    version="$version"
  else
    # If the current commit is not tagged, append the short commit hash to the version number
    version="${version}-${current_commit}"
  fi

  # Check if the repository is dirty
  if [ -n "$(git status --porcelain -uno -z)" ]; then
    # If the repository is dirty, append -dirty to the output version string
    version="${version}-dirty"
  fi

fi

# remove the first character from the variable
version=$(expr "$version" : '.\(.*\)')

printf %s "$version"

